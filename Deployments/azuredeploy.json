{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage Account name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "hostingPlanName": {
      "type": "string",
      "metadata": {
        "description": "Hosting plan for the function app."
      }
    },
    "keyVault": {
      "type": "string",
      "metadata": {
        "description": "Key vault name"
      }
    }
  },
  "variables": {

    "functionAppName": "[concat(parameters('appName'),'-fa')]",
    "applicationInsightsName": "[concat(parameters('appName'),'-ai')]",
    "hostingPlanName": "[concat(parameters('appName'),'-hp')]",
    "keyVaultName": "[concat(parameters('keyVault'),'-kv')]",

    "appInsightsSecretName": "[concat(parameters('appName'),'secret')]",
    "storageAccountSecretName": "[concat(parameters('storageAccountName'),'secret')]",

    "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
    "functionWorkerRuntime": "dotnet",
    "website_resource_id": "[concat(resourceId('Microsoft.Web/sites', variables('functionAppName')), '/providers/Microsoft.ManagedIdentity/Identities/default')]",

    "storageAccountResourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",

    "appInsightsSecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('appInsightsSecretName'))]",
    "storageAccountSecretResourceId": "[resourceId(resourceGroup().name, 'Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('storageAccountSecretName'))]"




  },
  "resources": [

    /******************************************************************************************************
    Create Host Plan
    ******************************************************************************************************/
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic"
      }
    },

    /******************************************************************************************************
    Create Storage Account
    ******************************************************************************************************/
    {
      "name": "[parameters('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "accessTier": "Hot"
      },

      //Add the required containers 
      "resources": [
        {
          "name": "[concat('default/','container1')]",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[parameters('storageAccountName')]"
          ]
        },
        {
          "name": "[concat('default/','container2')]",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[parameters('storageAccountName')]"
          ]
        }
      ]
    },

    /******************************************************************************************************
    Create Application Insights
    ******************************************************************************************************/
    {
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('applicationInsightsName')]",
      "type": "microsoft.insights/components",
      "location": "Australia East",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('applicationInsightsName'))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[variables('applicationInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },

    /******************************************************************************************************
    Create Function App 
    ******************************************************************************************************/
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
          ],
          "properties": {
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
          }
        },
        {
          "apiVersion": "2015-08-01",
          "type": "config",
          "name": "appsettings",         
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('storageAccountSecretName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('appInsightsSecretName'))]"
          ],
          "properties": {
            "WEBSITE_ENABLE_SYNC_UPDATE_SITE": "true",
            "FUNCTIONS_EXTENSION_VERSION": "~2",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('appInsightsSecretResourceId'), '2015-06-01').secretUriWithVersion, ')')]",
            "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageAccountSecretResourceId'),'2015-06-01').secretUriWithVersion, ')')]",
            "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('storageAccountSecretResourceId'),'2015-06-01').secretUriWithVersion, ')')]",
            "WEBSITE_CONTENTSHARE": "[tolower(variables('functionAppName'))]"
            //...
          }
        }

      ]
    },

    /*****************************************************************************************************
    Create Key Vault
    *****************************************************************************************************/
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",     
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "enabledForDeployment": "false",
        "enabledForDiskEncryption": "false",
        "enabledForTemplateDeployment": "false",
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "accessPolicies": [
          {
            "tenantId": "[reference(variables('website_resource_id'), '2018-11-30').tenantId]",
            "objectId": "[reference(variables('website_resource_id'), '2018-11-30').principalId]",
            "permissions": {
              "secrets": [ "get" ]
            }
          }
        ]
      },
      //Add the required keys
      "resources": [
        {
          "type": "secrets",
          "name": "[variables('storageAccountSecretName')]",
          "location": "[parameters('location')]",
          "apiVersion": "2018-02-14",         
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
          ],
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountResourceId'),'2015-05-01-preview').key1)]"
          }
        },
        {
          "type": "secrets",
          "name": "[variables('appInsightsSecretName')]",
          "location": "[parameters('location')]",
          "apiVersion": "2018-02-14",          
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
          ],
          "properties": {
            "value": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
          }
        }

      ]
    }
  ],
  "outputs": {
    "storageAccSecret": {
      "type": "string",
      "value": "[reference(variables('storageAccountSecretResourceId'),'2015-06-01').secretUriWithVersion]"
    },
    "appInsightSecret": {
      "type": "string",
      "value": "[reference(variables('appInsightsSecretResourceId'),'2015-06-01').secretUriWithVersion]"
    }

  }
}
